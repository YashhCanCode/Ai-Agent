from fastapi import FastAPI
from pydantic import BaseModel
import json
import os
import google.generativeai as genai

# --- Configure Gemini API key ---
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# --- Memory file ---
MEMORY_FILE = "memory.json"
if not os.path.exists(MEMORY_FILE):
    with open(MEMORY_FILE, "w") as f:
        f.write("[]")  # initialize empty JSON array

# --- FastAPI app ---
app = FastAPI(title="AI Knowledge Continuity Agent (Gemini)")

# --- Pydantic models ---
class MemoryItem(BaseModel):
    issue: str
    solution: str

class Query(BaseModel):
    question: str

# --- Add memory endpoint ---
@app.post("/add_memory")
def add_memory_entry(item: MemoryItem):
    try:
        # Load existing memory
        with open(MEMORY_FILE, "r") as f:
            memory = json.load(f)

        # Append new entry
        memory.append({"issue": item.issue, "solution": item.solution})

        # Save back
        with open(MEMORY_FILE, "w") as f:
            json.dump(memory, f, indent=4)

        return {"message": "Memory added successfully"}

    except Exception as e:
        print("Add memory error:", e)
        return {"error": str(e)}

# --- Query endpoint ---
@app.post("/query")
def query_agent(q: Query):
    try:
        # Load memory
        with open(MEMORY_FILE, "r") as f:
            memory = json.load(f)

        # Simple search: return solution if issue text matches
        for entry in reversed(memory):
            if entry["issue"].lower() in q.question.lower():
                return {"response": entry["solution"]}

        # If no match, call Gemini AI
        response = genai.respond(
    model="models/chat-bison-001",
    prompt=f"You are an IT assistant for troubleshooting.\nUser: {q.question}\nAssistant:"
)

        return {"response": response.last}

    except Exception as e:
        print("Query error:", e)
        return {"error": str(e)}

# --- Root endpoint ---
@app.get("/")
def root():
    return {"message": "AI Knowledge Continuity Agent (Gemini) is running ðŸš€"} //old main.
    


--> queryendpoint 

@app.post("/query")
def query_agent(q: Query):
    try:
        # Search memory first
        with open(MEMORY_FILE, "r") as f:
            memory = json.load(f)
        for entry in reversed(memory):
            if entry["issue"].lower() in q.question.lower():
                return {"response": entry["solution"], "context": f"Found in memory: {entry['issue']}"}

        # --- If not found, ask Gemini ---
        response = genai.respond(
            model="models/chat-bison-001",  # works with your first working code
            prompt=f"You are an IT troubleshooting assistant.\nUser: {q.question}\nAssistant:"
        )

        return {"response": response.last, "context": "Generated using Gemini"}
    except Exception as e:
        print("Query error:", e)
        return {"error": str(e)}

---------------------------------------------------------------------------------------------------------------


